Identity Application Entry Points
=================================

Test:
Understand how requests are formed and typical responses from the application

  -- Identify all HTTP GET/POST/PUT/DELETE Requests -  what all parameters are send in requests and what all is received in response
  -- Within the POST request, make special note of any hidden form fields that are being passed to the application, 
     as these usually contain sensitive information, such as state information, quantity of items, the price of items, 
     that the developer never intended for you to see or change.
  
  Requests:
• Identify where GETs are used and where POSTs are used.
• Identify all parameters used in a POST request (these are in the body
of the request).
• Within the POST request, pay special attention to any hidden
parameters. When a POST is sent all the form fields (including hidden parameters) will be sent in the body of the HTTP message to the application. These typically aren’t seen unless a proxy or view the HTML source code is used. 
In addition, the next page shown, its data, and the level of access can all be different depending on the value of the hidden parameter(s).
• Identify all parameters used in a GET request (i.e., URL), in particular the query string (usually after a ? mark).
• Identify all the parameters of the query string. These usually are in a pair format, such as foo=bar. Also note that many parameters can be in one query string such as separated by a &, ~, :, or any other
special character or encoding.
• A special note when it comes to identifying multiple parameters
in one string or within a POST request is that some or all of the parameters will be needed to execute the attacks.
The tester needs to identify all of the parameters (even if encoded or encrypted) and identify which ones are processed by the application. Later sections of the guide will identify how to test these parameters. At this point, just make sure each one of them is identified.
• Also pay attention to any additional or custom type headers not typically seen (such as debug=False).

Responses:
• Identify where new cookies are set (Set-Cookie header), modified, or added to.
• Identify where there are any redirects (3xx HTTP status code), 400 status codes, in particular 403 Forbidden, and 500 internal server errors during normal responses (i.e., unmodified requests).
• Also note where any interesting headers are used. For example, “Server: BIG-IP” indicates that the site is load balanced.
Thus, if a site is load balanced and one server is incorrectly configured, then the tester might have to make multiple requests to access the vulnerable server, depending on the type of load balancing used.

-- Identify exernal sources from where application receives data using any SOAP or any other API's.


Map Execution Path of Applicaton
=================================

Test:  Map the target application and understand the principal workflows

To demonstrate code coverage to the application owner, the tester can start with a spreadsheet and document all the links discovered 
by spidering the application (either manually or automatically). Then the tester can look more closely at decision points 
in the application and investigate how many significant code paths are discovered.

There are several ways to approach the testing and measurement of code coverage:
• Path - test each of the paths through an application that includes combinatorial and boundary value analysis testing for each decision path. While this approach offers thoroughness, the number of testable paths grows exponentially with each decision branch.
• Data flow (or taint analysis) - tests the assignment of variables via external interaction (normally users). Focuses on mapping the flow, transformation and use of data throughout an application. • Race - tests multiple concurrent instances of the application
manipulating the same data.

Use ZAP tool spider to discover all urls.


FingerPrint Web Application Framework -  Know which framework and verison hhas been used
========================================================================================
Look in to these:

• HTTP headers
• Cookies
• HTML source code - comments,  script variable names 
• Specific files and folders - very framework has different set of files and folders

Example:  X-Powered-By: Mono n response - we understand that the web ap- plication framework is likely to be Mono

X-Generator header

online toos:  https://www.morningstarsecurity.com/research/whatweb

Never expose this information. Modify custom headers, and cookie names so that framework name can nit be reveled to the attacker. 

General guidelines:
• Make sure there are no visual markers disclosing the framework
• Remove any unnecessary comments (copyrights, bug information, specific framework comments)
• Remove META and generator tags
• Use the companies own css or js files and do not store those in a framework-specific folders
• Do not use default scripts on the page or obfuscate them if they must be used.

For file and folders:

• Remove any unnecessary or unused files on the server. This implies text files disclosing information about versions and installation too.
• Restrict access to other files in order to achieve 404-response when accessing them from outside. 
This can be done, for example, by modifying htaccess file and adding RewriteCond or RewriteRule there.
An example of such restriction for two common WordPress folders is presented below.


